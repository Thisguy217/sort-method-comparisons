import time

arr=[987, 319, 209, 223, 492, 416, 994, 469, 589,
     110, 20, 244, 462, 739, 971, 219, 33, 940,
     863, 772, 812, 436, 405, 522, 566, 468, 380,
     307, 611, 571, 390, 529, 360, 398, 646, 608,
     111, 114, 915, 401, 743, 617, 195, 32, 729,
     622, 251, 852, 614, 103, 849, 616, 266, 381,
     235, 355, 756, 747, 903, 794, 368, 26, 117,
     965, 206, 132, 299, 394, 929, 336, 759, 828,
     876, 866, 483, 241, 811, 642, 83, 99, 410,
     361, 384, 301, 782, 755, 71, 851, 791, 499,
     479, 749, 494, 387, 155, 548, 978, 875, 144,
     90, 449, 142, 51, 447, 409, 338, 221, 905,
     42, 974, 473, 82, 457, 58, 714, 388, 897,
     107, 55, 912, 742, 783, 349, 532, 573, 738,
     891, 630, 506, 718, 858, 560, 421, 664, 579,
     411, 248, 422, 124, 41, 986, 202, 464, 954,
     920, 76, 893, 48, 535, 377, 796, 14, 143,
     31, 988, 654, 112, 702, 168, 72, 805, 870,
     651, 691, 686, 799, 201, 39, 189, 711, 533,
     186, 180, 780, 786, 314, 174, 358, 677, 669,
     306, 208, 717, 509, 49, 693, 54, 706, 343,
     149, 737, 370, 568, 831, 947, 310, 98, 376,
     877, 715, 785, 732, 550, 363, 645, 967, 919,
     606, 257, 602, 808, 787, 161, 833, 603, 591,
     67, 10, 779, 193, 259, 423, 159, 100, 28, 501,
     44, 286, 264, 634, 618, 212, 985, 75, 486,
     835, 590, 113, 641, 512, 183, 426, 19, 263,
     733, 118, 762, 15, 910, 999, 789, 922, 817,
     924, 907, 154, 233, 393, 952, 707, 950, 304,
     484, 925, 583, 754, 649, 175, 190, 670, 958,
     666, 913, 495, 721, 131, 13, 446, 704, 167,
     224, 696, 829, 688, 444, 283, 249, 156, 684,
     276, 750, 333, 598, 192, 629, 277, 119, 229,
     191, 879, 428, 382, 258, 623, 745, 505, 722,
     11, 763, 826, 88, 561, 520, 139, 331, 324,
     949, 105, 577, 417, 187, 640, 337, 176, 300,
     699, 585, 793, 356, 900, 519, 12, 740, 760,
     784, 572, 23, 901, 544, 552, 510, 234, 521,
     679, 197, 478, 931, 798, 647, 43, 850, 838,
     896, 16, 80, 185, 942, 357, 752, 941, 500,
     335, 442, 120, 431, 302, 475, 81, 86, 644,
     163, 69, 439, 653, 815, 736, 184, 254, 556,
     945, 744, 514, 56, 823, 367, 788, 989, 215,
     871, 482, 842, 767, 265, 600, 341, 751, 960,
     764, 321, 261, 157, 758, 695, 441, 683, 508,
     448, 467, 359, 865, 284, 211, 660, 188, 122,
     534, 273, 316, 312, 94, 378, 182, 748, 200,
     687, 604, 62, 432, 662, 476, 596, 734, 282,
     673, 135, 546, 790, 452, 78, 607, 460, 170,
     937, 40, 753, 659, 252, 391, 584, 690, 518,
     395, 458, 594, 285, 309, 95, 348, 844, 497,
     795, 637, 238, 133, 225, 493, 491, 308, 551,
     825, 425, 230, 864, 347, 936, 576, 89, 528,
     961, 325, 983, 313, 288, 177, 563, 523, 727,
     38, 933, 708, 701, 761, 558, 489, 625, 597,
     403, 887, 268, 574, 504, 440, 993, 531, 126,
     18, 96, 87, 570, 239, 66, 408, 256, 543, 839,
     894, 725, 280, 402, 220, 539, 2, 437, 334,
     609, 424, 413, 705, 981, 624, 615, 498, 9,
     800, 792, 515, 291, 658, 1, 526, 555, 147,
     814, 661, 477, 698, 984, 880, 601, 434, 207,
     53, 128, 274, 680, 385, 735, 841, 116, 354,
     461, 326, 697, 672, 353, 553, 101, 450, 538,
     959, 923, 507, 365, 902, 129, 973, 125, 768,
     61, 575, 970, 730, 547, 412, 976, 995, 840,
     169, 916, 822, 17, 418, 45, 47, 438, 639, 963,
     746, 121, 516, 290, 320, 166, 77, 73, 809, 236,
     854, 587, 322, 927, 627, 327, 892, 340, 632,
     885, 181, 79, 781, 292, 60, 34, 549, 228, 213,
     178, 404, 980, 123, 675, 904, 329, 93, 881, 164,
     106, 582, 488, 250, 628, 137, 620, 97, 856, 802,
     567, 503, 328, 939, 832, 24, 351, 496, 214, 797,
     765, 465, 944, 935, 369, 820, 173, 652, 692, 898,
     27, 595, 540, 824, 524, 836, 938, 886, 151, 862,
     297, 626, 778, 275, 134, 392, 821, 930, 63, 232,
     406, 344, 362, 242, 30, 957, 52, 366, 429, 296,
     723, 757, 311, 37, 536, 345, 435, 816, 709, 996,
     68, 470, 926, 636, 272, 240, 908, 172, 860, 678,
     196, 774, 92, 663, 882, 998, 317, 527, 389, 104,
     638, 396, 878, 665, 262, 827, 990, 490, 303, 656,
     332, 657, 141, 643, 453, 542, 22, 559, 847, 731,
     741, 806, 255, 222, 917, 681, 171, 165, 352, 857,
     837, 25, 158, 569, 969, 287, 610, 586, 843, 895,
     846, 115, 74, 855, 819, 487, 415, 888, 456, 588,
     57, 84, 668, 305, 517, 650, 379, 140, 108, 813,
     210, 330, 480, 454, 427, 136, 537, 102, 803, 179,
     29, 951, 674, 364, 868, 562, 160, 323, 397, 580,
     621, 712, 342, 612, 859, 648, 807, 247, 943, 578,
     671, 703, 964, 4, 85, 260, 770, 5, 472, 35, 315,
     884, 373, 243, 127, 801, 70, 766, 966, 867, 455,
     295, 818, 773, 777, 605, 946, 565, 203, 194, 386]

start=time.time()
def insertion_sort(array):
    for i in range(1, len(array)):
        key=array[i]
        j=i-1
        while j>=0 and key< array[j]:
            array[j+1]=array[j]
            j-=1
        array[j+1]=key

insertion_sort(arr)
sort_type1=time.time()

def merge_sort(array):
    if len(array)>1:
        mid=len(array)//2
        L=array[:mid]
        R=array[mid:]
        merge_sort(L)
        merge_sort(R)
        i=j=k=0
        while i<len(L) and j<len(R):
            if L[i] < R[j]:
                array[k]=L[i]
                i+=1
            else:
                array[k]=R[j]
                j+=1
            k+=1
        while i<len(L):
            array[k]=L[i]
            i+=1
            k+=1
        while j<len(R):
            array[k]=R[j]
            j+=1
            k+=1

merge_sort(arr)
sort_type2=time.time()

def partition(array, low, high):
    i=(low-1)
    pivot=array[high]
    for j in range(low,high):
        if array[j]<=pivot:
            i=i+1
            array[i],array[j]=array[j],array[i]
    array[i+1],array[high]=array[high],array[i+1]
    return (i+1)

def quick_sort(array, low, high):
    if len(array)==1:
        return array
    if low < high:
        pi = partition(array, low, high)
        quick_sort(array, low, pi-1)
        quick_sort(array,pi+1, high)

quick_sort(arr,0,len(arr)-1)
sort_type3=time.time()

def bubble_sort(array):
    n = len(array)
    for i in range(n-1):
        for j in range(0, n-i-1):
            if array[j]>array[j+1]:
                array[j],array[j+1]=array[j+1],array[j]

bubble_sort(arr)
sort_type4=time.time()

method1=(sort_type1-start)*1000
method2=(sort_type2-sort_type1)*1000
method3=(sort_type3-sort_type2)*1000
method4=(sort_type4-sort_type3)*1000

times={}
times["Insertion Sort"]=method1
times["Merge Sort"]=method2
times["Quick Sort"]=method3
times["Bubble Sort"]=method4

print(min(times,key=times.get),times[min(times,key=times.get)])